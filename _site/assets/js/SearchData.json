{"0": {
"doc":  "Jekyll Garden Features",
"title": "Jekyll Garden Features",
"content": "This theme is a fork of the Simply Jekyll theme , which I used for around six months before building this one. Most of the core features, like feed, wiki-links becoming hyperlinks, backlinks, etc., are slightly modified versions of the Simple Jekyll theme. I have tried not to break features from the theme, but I am not sure as I don&#39;t use many of them. Check Simply Jekyll features here. Note feed . Jekyll garden comes with a feed-like display of all notes. There is a frontmatter value called notetype using which you can decide if notes need to be displayed or not on the feed. Use notetype:feed to show, and notetype:unfeed. Read more at [[The story of a hidden note]] . Feed as Homepage . The current configuration of this theme contains a homepage, and feed is generated at /notes. You can make the feed homepage by modifying homepage: enabled to false in _config.yml. Content Files . To modify homepage content, edit _includes/Homepage.html. Similarly, to edit feed intro, make changes at _includes/FeedContent.html. To modify the navigation part, edit _includes/Header.html . Limitations : Tags . This theme doesn&#39;t support #tags inside the story. Tags using frontend YAML is possible, but it will be a single file index as auto-generating pages per Tag is complex using Github pages. (I might add this in the next version, if I can crack how to, and if there is a demand) . Limitations : Images . Jekyll doesn&#39;t render images or attachments inside collection folders, and it suggests /assets/img/ to accommodate all images. You can make the entire GitHub repo your Obsidian vault, but I felt it cluttered to see code along with my notes. My notes have significantly fewer images, and hence, for now, I manually paste images to assets and copy relative URLs to Obsidian. (but I am not sure if it&#39;s the best way) .",
"url": "/notes/features"
},"1": {
"doc":  "Install and Setup",
"title": "Install and Setup",
"content": "Setting up a Jekyll Garden is a simple task for both new users and existing Obsidian users. This document explains how to fork this Jekyll theme, start using it via Github pages, and configure the Obsidian folders and frontmatter. Github Setup . Step 1: Sign-In to Github, visit the theme page and click on &#39;Use this Template&#39; . Step 2: Name the forked repo as yourusername.github.io. My Github username is hfactor, hence it&#39;s hfactor.github.io . Step 3: Go to your repo&#39;s settings &amp;gt; pages and set the source to your main branch. Step 4 (Optional): If you have a custom domain, set CNAME. Claps! The Jekyll website with a Note Garden theme is ready. Visit yourusername.github.io to see that. If it&#39;s not working, edit this readme (add something and commit) to trigger static page generation. Github to your Desktop . Step 1: Go to yourusername.github.io, and clone your repository to your machine. For this, you can use git-commands or install Github for desktop. Step 2: Once you have successfully cloned the repository to your machine, Open the Obsidian app, and set the folder _notes inside the repository as your vault. Obsidian . Choosing the _notes folder as your vault is critical, Once done, you can start adding notes to this vault and add frontmatter to support. Read about theme&#39;s frontmatter at [[Welcome to the garden]] . Frontmatter . For all notes to work properly, we need to have three frontmatter values. (If you check this MD file, you will see them as the first five lines). title:&quot;Filename&quot; notetype: feed | unfeed date: DD-MM-YYYY . The title should be the same as that for the file name (for backlinks to work). notetype is used to declutter the feed by hiding less relevant, supporting-notes from the feed. The date is used to sort notes in the latest one first order. (I consider it as the last updated date than created date.). Updating Digital Garden . Once you have enough notes, got to the Github Desktop app, commit the changes to main, and push the changes to Github. Github will update the pages! . If you want to know my workflow or Obsidian folder structure, check here . Notes . The best part of Jekyll and Obsidian is that they use a standard markup language like markdown to build notes. And hence, the content becomes independent of the tool. You can use any text editor like VSCode or atom or 1Writer for iPad to edit the text. Check for plugins that do autocomplete for [[ and that&#39;s all you need! Similarly, you can use the theme without syncing locally. You can directly add and edit notes using Github or tools like Forestry and modify the content! . The best part of Obsidian is how it connects notes by auto-completing the wiki links and providing a graph view. I usually use 1Writer on iPad to make content, and Obsidian for cleanup, reading, and finding new connections. (Read my workflow) .",
"url": "/notes/how-to"
},"2": {
"doc":  "Hidden Note",
"title": "Hidden Note",
"content": "Tada! You found the hidden note! This note is just like [[Markdown Rendered]], but not part of the feed since we hide it using notetype: unfeed. Please remember that the intention here is only to declutter the feed and not provide any &#39;protection&#39; to the content. Notes with unfeed note type will be synced to Github, accessed via URL, and hyperlinked. How to handle Private notes? . I would recommend using sub-folders inside _notes (Eg: Public and Private) and add Private to .gitignore so that Private notes won&#39;t get synced to Github. PS: Can you see the backlink to Welcome to the garden? That&#39;s backlinking! :) .",
"url": "/notes/Hidden-Note"
},"3": {
"doc":  "Markdown Rendered",
"title": "Markdown Rendered",
"content": "This page contains a quick reference to all markdown properties. 90% of this was part of the Simple Jekyll theme, which we forked to built this one. Great job, makers! . By the way, how did you reach this page? From backlink under [[Hidden Note] or from feed, along with [[Welcome to the garden]]? . | Headings | H1 . | H2 . | H3 . | H4 . | H5 . | H6 | . | . | . | Emphasis | Lists | Links | Images | Code and Syntax Highlighting | Math expressions | Tables | Blockquotes | . | Inline HTML . | Horizontal Rule | Line Breaks | . | . | . Headings . # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 . H1 . H2 . H3 . H4 . H5 . H6 . Emphasis . Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ . Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this. Lists . 1. First ordered list item ...1. Ordered sublist 2. Another item ...* Unordered sublist 3. Actual numbers don&#39;t matter, just that it&#39;s a number 4. And another item. ⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#39;ll use three here to also align the raw Markdown). ⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses . | First ordered list item . | Ordered sublist | . | Another item . | Unordered sublist | . | Actual numbers don&#39;t matter, just that it&#39;s a number | And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#39;ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ Note that this line is separate, but within the same paragraph.⋅⋅ (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) . | . | Unordered list can use asterisks | Or minuses | Or pluses | . Links . [I&#39;m an inline-style link](https://www.google.com) [I&#39;m an inline-style link with title](https://www.google.com &quot;Google&#39;s Homepage&quot;) [I&#39;m a reference-style link][Arbitrary case-insensitive reference text] [I&#39;m a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or &amp;lt;http://www.example.com&amp;gt; and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com . I&#39;m an inline-style link . I&#39;m an inline-style link with title . I&#39;m a reference-style link . I&#39;m a relative reference to a repository file . You can use numbers for reference-style link definitions . Or leave it empty and use the link text itself. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. Images . From what I understood, Jekyll doesn&#39;t support source files inside collection folders like _notes. Currently, what I do is, I upload images and attachments manually to /assets/img/ and use . From Assets/Img ![Alt Text](/assets/img/1-how-to.png &quot;Title Here&quot;) . to embed images. This is not effective, but works. Also, public URLs work . From URL ![](https://jekyllrb.com/img/logo-2x.png) . From Assets/Img . From URL . Code and Syntax Highlighting . Code blocks are part of the Markdown spec, but syntax highlighting isn&#39;t. However, many renderers – like Github&#39;s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); . Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks – they&#39;re easier and only they support syntax highlighting. ```javascript var s = &quot;JavaScript syntax highlighting&quot;; alert(s); ``` ```python s = &quot;Python syntax highlighting&quot; print s ``` ``` No language indicated, so no syntax highlighting. But let&#39;s throw in a tag. ``` . var s = &quot;JavaScript syntax highlighting&quot;; alert(s); . s = &quot;Python syntax highlighting&quot; print s . No language indicated, so no syntax highlighting. But let&#39;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;. Math expressions . You can write math expressions using the \\LateX\\LateX\\LateX markup language between double dollar signs : $$…$$. They can be written inline or as a single block. For example, . | $$P(A | B) = \\frac{P(B | A)\\cdot P(A)}{P(B)}$$ will render as : | . P(A∣B)=P(B∣A)⋅P(A)P(B)P(A|B) = \\frac{P(B | A)\\cdot P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)⋅P(A)​ | Please note that for a math block to be displayed correctly, it needs to be separated by an empty line, above and below. Besides, the pipe character | may conflict with markdown : it is recommended to use \\vert instead. | . Tables . Tables aren&#39;t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. | Tables | Are | Cool | ------------- |:-------------:| -----:| col 3 is | right-aligned | $1600 | col 2 is | centered | $12 | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don&#39;t need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 . Colons can be used to align columns. | Tables | Are | Cool | . | col 3 is | right-aligned | $1600 | . | col 2 is | centered | $12 | . | zebra stripes | are neat | $1 | . There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don&#39;t need to make the raw Markdown line up prettily. You can also use inline Markdown. | Markdown | Less | Pretty | . | Still | renders | nicely | . | 1 | 2 | 3 | . Blockquotes . &amp;gt; Blockquotes are very handy in email to emulate reply text. &amp;gt; This line is part of the same quote. Quote break. &amp;gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let&#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Inline HTML . You can also use raw HTML in your Markdown, and it&#39;ll mostly work pretty well. &amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt;Definition list&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;Is something people use sometimes.&amp;lt;/dd&amp;gt; &amp;lt;dt&amp;gt;Markdown in HTML&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;Does *not* work **very** well. Use HTML &amp;lt;em&amp;gt;tags&amp;lt;/em&amp;gt;.&amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; . You can also use raw HTML in your Markdown, and it&#39;ll mostly work pretty well. Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags. Horizontal Rule . Three or more... --- Hyphens *** Asterisks ___ Underscores . Three or more… . Hyphens . Asterisks . Underscores . Line Breaks . My basic recommendation for learning how line breaks work is to experiment and discover – hit once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&#39;ll soon learn to get what you want. &quot;Markdown Toggle&quot; is your friend. Here are some things to try out: . Here&#39;s a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also a separate paragraph, but... This line is only separated by a single newline, so it&#39;s a separate line in the *same paragraph*. Here&#39;s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph. This line is also a separate paragraph, but… This line is only separated by a single newline, so it&#39;s a separate line in the same paragraph. License: CC-BY .",
"url": "/notes/Markdown-Rendered"
},"4": {
"doc":  "Welcome to the garden",
"title": "Welcome to the garden",
"content": "This is a sample atomic note. The file location is _notes/Public, and it appears on the note feed. _notes is the Obsidian Vault directory. Check how to to know more. While all files inside this folder get rendered and can be linked, only those notes with notetype: feed will be listed in the feed. For example, click on this [[Hidden Note]]! . Also, backlinks (pages with a link to this page) are listed down. Check that one to see how markdown styles get rendered in this theme.",
"url": "/notes/Welcome-to-the-garden"
},"5": {
"doc":  "Carrossel descomplicado com HTML e CSS",
"title": "Carrossel descomplicado com HTML e CSS",
"content": "Em 2016, criei um postagem no Tableless (link no final) ensinando a como criar um Carrossel simples utilizando apenas HTML e CSS. Eu nunca imaginei que aquele post simples seria publicado, muito menos acessado por pessoas que na época estavam se aventurando sobre AngularJS. Recentemente, encontrei o velho post, que já estava publicado a 5 anos, e quase cai de costas quando vi que só o código de exemplo já tinha mais de vinte mil vizualições, e alguns comentários no Post informando que aquela simples postagem, tinham ajudado eles. Por conta disso, resolvi criar meu próprio blog, e mais que merecido, repostar aqui o meu primeiro Post de Sucesso! Sem mais delongas… Carrossel descomplicado com HTML e CSS. Não é difícil perceber que muitos desenvolvedores tanto iniciantes como os veteranos de guerra ainda sofrem quando o assunto é carrossel, mesmo utilizando frameworks como BootStrap. Mas seus problemas acabaram! (música de chegada milagrosa), com o conhecimento de poucas técnicas podemos resolver esse “gigante” problema facilmente. Pseudo classe :target – CSS . Para resolver o grande problema de transição do carrossel, vamos utilizar a pseudo classe :target, que atribui algumas características do CSS para o elemento HTML. Para quem ainda não conhece a pseudo classe “:target” aqui vai um exemplo bem alto explicativo. HTML . &amp;lt;a href=&quot;#texto-exemplo-1&quot;&amp;gt;Seleciona - Texto exemplo 1&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt; &amp;lt;a href=&quot;#texto-exemplo-2&quot;&amp;gt;Seleciona - Texto exemplo 2&amp;lt;/a&amp;gt; &amp;lt;p id=&quot;texto-exemplo-1&quot; class=&quot;text&quot;&amp;gt;Texto exemplo 1&amp;lt;/p&amp;gt; &amp;lt;p id=&quot;texto-exemplo-2&quot; class=&quot;text&quot;&amp;gt;Texto exemplo 2&amp;lt;/p&amp;gt; . CSS .text:target{ border: 1px solid #000; } . Você pode conferir o resultado no CODEPEN aqui. Estrutura HTML . A estrutura que iremos utilizar também é bem simples. Primeiramente uma DIV como “container” que é onde irá acontecer o carrossel, também utilizaremos outras DIVs que chamaremos de “wall-x” onde x é o valor da DIV no carrossel. Mão na massa . Vamos começar pelo HTML definindo a estrutura do nosso carrossel. &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;div class=&quot;wall wall-1&quot; id=&quot;wall-1&quot;&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 1&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;wall wall-2&quot; id=&quot;wall-2&quot;&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 2&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;wall wall-3&quot; id=&quot;wall-3&quot;&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 3&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; . Terminado a estrutura, devemos deixar todas as DIVs wall com “display: none;” ( sim, todas! ) para não serem listadas de uma vez.container{ width: 150px; height: 150px; } .wall{ display: none; width: 100%; height: 100%; } /* Corzinha de fundo para diferenciar */ .wall-1{ background-color: #f00; } .wall-2{ background-color: #0f0; } .wall-3{ background-color: #00f; } .wall:target{ display: block; } . Explicando… . Basicamente, definimos o tamanho do “container”. Deixamos todas as DIVs “wall” com “display: none;” e definimos que todo “target” terá o “display: block;”. Se nada estiver aparecendo na sua tela, não se assuste, tudo está funcionando, o que acontece é que você não tem nem um “target” definido, mas você pode fazer um teste adicionando “#wall-1” na sua url. Ok, já temos 90% do carrossel pronto. Para finalizarmos o carrossel precisamos adicionar as setas ou botões para fazer a transição de uma tela para outra, e é ai que vem a outra parte fácil. A unica coisa que precisamos fazer é adicionar links que setam para o target anterior ou seguinte, neste caso, se você estiver no “#wall-2” o anterior seria “#wall-1” e o seguinte “#wall-3”. &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;div class=&quot;wall wall-1&quot; id=&quot;wall-1&quot;&amp;gt; &amp;lt;a href=&quot;#wall-3&quot;&amp;gt;Voltar&amp;lt;/a&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 1&amp;lt;/h1&amp;gt; &amp;lt;a href=&quot;#wall-2&quot;&amp;gt;Avançar&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;wall wall-2&quot; id=&quot;wall-2&quot;&amp;gt; &amp;lt;a href=&quot;#wall-1&quot;&amp;gt;Voltar&amp;lt;/a&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 2&amp;lt;/h1&amp;gt; &amp;lt;a href=&quot;#wall-3&quot;&amp;gt;Avançar&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;wall wall-3&quot; id=&quot;wall-3&quot;&amp;gt; &amp;lt;a href=&quot;#wall-2&quot;&amp;gt;Voltar&amp;lt;/a&amp;gt; &amp;lt;h1&amp;gt;carrosel numero - 3&amp;lt;/h1&amp;gt; &amp;lt;a href=&quot;#wall-1&quot;&amp;gt;Avançar&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; . Para facilitar a exibição do primeiro target (sem ter que criar um link personalizado) você pode simplesmente colocar uma linha de javascript para todo o carrossel ficar ativa 😉 . window.location = &quot;#wall-1&quot;; . Você pode ver o código em ação no CODEPEN aqui. Pronto! Uma maneira muito simples para resolver um grande problema. Possível problema que você poderá encontrar . Caso você esteja utilizando algum link com target “#” para executar alguma ação, o “#wall-x” que está sendo setado perderá o foco, e logicamente terá a atribuição “display: none;” retomada. Neste caso é recomendável que não utilize targets na mesma pagina do carrossel e substitua os links “#” por funções onclick via JavaScript ou JQuery. Considerações . Espero que tenha gostado ou tenha sido utíl, caso você tenha curiosidade o link da postagem original vai estar aqui no final nos links. Obrigado por acompanhar! . Links . | Exemplo :target =&amp;gt; Codepen . | Resultado final =&amp;gt; Codepen . | Post Original Tableless =&amp;gt; Tableless . | .",
"url": "/notes/Carrossel-descomplicado-com-HTML-e-CSS"
}
}